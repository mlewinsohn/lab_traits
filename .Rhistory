#as being sampled at the same time),
#number of generations (will not be the same for all lineages), or molecualar distance
#(number of genetic distances). The genetic tree will be most useful downstream for
#calculating tree stats.
#
########################################################################
convert_nodes_to_string <- function(orphan_cells,
all_cells,
branch_unit = c("time", "molecular", "generations")){
#should be already sorted by index, but just to make sure
all_cells <- all_cells %>% arrange(index)
#make presence-absence df
all_muts <- define_mut_presence_absence(all_cells) %>%
as.data.frame %>%
add_column("index" = all_cells$index) %>%
arrange(index) %>%
dplyr::select(-index)
#start out with each leaf as its own subtree
subtrees <- as.character(orphan_cells)
#keep track of all nodes in tree
node_vec <- orphan_cells
n <- length(orphan_cells)
while(length(subtrees) > 1) { #will connect subtrees by MCRA until reach single tree
#make all pariwise combinations of cells without mrca
all_combs <- as.data.frame(t(combn(orphan_cells, 2)))
#find ancestors of candidate cells
common_ancestors <- map2_dbl(all_combs$V1, all_combs$V2, function(index_1, index_2) find_MRCA(index_1 = index_1,
index_2 = index_2,
all_cells = all_cells))
common_ancestors_data <- all_cells[common_ancestors,]
#find youngest ancestor and two children
youngest_ancestor <- common_ancestors_data$index[common_ancestors_data$birthdate == max(common_ancestors_data$birthdate)]
#in case more than 2 cells have same ancestor,
#choose one to start, we will come back to the other
youngest_ancestor <- youngest_ancestor[1]
#keep track of children descended from that ancestor
children <- unique(unlist(all_combs[which(common_ancestors == youngest_ancestor),]))
branch_lengths <- c()
for (child in children) {
c <- last(which(node_vec == child))
if (branch_unit == "molecular") {
bl <- calc_pairwise_genetic_distance(child, youngest_ancestor, all_muts = all_muts)
branch_lengths <- c(branch_lengths, as.character(round(bl, 5)))
} else if(branch_unit == "generations") {
ancestors <- collect_all_ancestors(index = child, all_cells)
gens <- which(ancestors == youngest_ancestor)
branch_lengths <- c(branch_lengths, as.character(gens))
}else {
t_a <- all_cells[youngest_ancestor, "deathdate"]
t_c <- all_cells[child, "deathdate"] #use deathdate
branch_lengths <- c(branch_lengths, as.character(round(t_c-t_a,4)))
}
}
if (branch_unit == "none") {
branch_lengths[1:lenght(branch_lengths)] <- ""
}
#make new subtree from combining children and MCRA
subtrees <- c(subtrees, paste0("(",paste(paste(subtrees[which(orphan_cells %in% children)],branch_lengths,sep=":"), collapse = ","),")",as.character(youngest_ancestor)))
subtrees <- subtrees[-which(orphan_cells %in% children)] #remove child trees after used
orphan_cells <- c(orphan_cells, youngest_ancestor) #add ancestor as orphan
node_vec <- c(node_vec, youngest_ancestor)
orphan_cells <- orphan_cells[-which(orphan_cells %in% children)] #remove children
}
return(list("tree.text"= paste0(last(subtrees),";"), "node_vec" = node_vec))
}
sim_nwk_list <- convert_nodes_to_string(final_sampled_cells$index,
CC_sim_cells,
branch_unit = "none")
#nwk string that describes the tree
#########################################################################
#true tree that describes history of the tumor
#This function has the option to be simulation time (all leaves will be represented
#as being sampled at the same time),
#number of generations (will not be the same for all lineages), or molecualar distance
#(number of genetic distances). The genetic tree will be most useful downstream for
#calculating tree stats.
#
########################################################################
convert_nodes_to_string <- function(orphan_cells,
all_cells,
branch_unit = c("time", "molecular", "generations")){
#should be already sorted by index, but just to make sure
all_cells <- all_cells %>% arrange(index)
#make presence-absence df
all_muts <- define_mut_presence_absence(all_cells) %>%
as.data.frame %>%
add_column("index" = all_cells$index) %>%
arrange(index) %>%
dplyr::select(-index)
#start out with each leaf as its own subtree
subtrees <- as.character(orphan_cells)
#keep track of all nodes in tree
node_vec <- orphan_cells
n <- length(orphan_cells)
while(length(subtrees) > 1) { #will connect subtrees by MCRA until reach single tree
#make all pariwise combinations of cells without mrca
all_combs <- as.data.frame(t(combn(orphan_cells, 2)))
#find ancestors of candidate cells
common_ancestors <- map2_dbl(all_combs$V1, all_combs$V2, function(index_1, index_2) find_MRCA(index_1 = index_1,
index_2 = index_2,
all_cells = all_cells))
common_ancestors_data <- all_cells[common_ancestors,]
#find youngest ancestor and two children
youngest_ancestor <- common_ancestors_data$index[common_ancestors_data$birthdate == max(common_ancestors_data$birthdate)]
#in case more than 2 cells have same ancestor,
#choose one to start, we will come back to the other
youngest_ancestor <- youngest_ancestor[1]
#keep track of children descended from that ancestor
children <- unique(unlist(all_combs[which(common_ancestors == youngest_ancestor),]))
branch_lengths <- c()
for (child in children) {
c <- last(which(node_vec == child))
if (branch_unit == "molecular") {
bl <- calc_pairwise_genetic_distance(child, youngest_ancestor, all_muts = all_muts)
branch_lengths <- c(branch_lengths, as.character(round(bl, 5)))
} else if(branch_unit == "generations") {
ancestors <- collect_all_ancestors(index = child, all_cells)
gens <- which(ancestors == youngest_ancestor)
branch_lengths <- c(branch_lengths, as.character(gens))
}else {
t_a <- all_cells[youngest_ancestor, "deathdate"]
t_c <- all_cells[child, "deathdate"] #use deathdate
branch_lengths <- c(branch_lengths, as.character(round(t_c-t_a,4)))
}
}
if (branch_unit == "none") {
branch_lengths[1:length(branch_lengths)] <- ""
}
#make new subtree from combining children and MCRA
subtrees <- c(subtrees, paste0("(",paste(paste(subtrees[which(orphan_cells %in% children)],branch_lengths,sep=":"), collapse = ","),")",as.character(youngest_ancestor)))
subtrees <- subtrees[-which(orphan_cells %in% children)] #remove child trees after used
orphan_cells <- c(orphan_cells, youngest_ancestor) #add ancestor as orphan
node_vec <- c(node_vec, youngest_ancestor)
orphan_cells <- orphan_cells[-which(orphan_cells %in% children)] #remove children
}
return(list("tree.text"= paste0(last(subtrees),";"), "node_vec" = node_vec))
}
sim_nwk_list <- convert_nodes_to_string(final_sampled_cells$index,
CC_sim_cells,
branch_unit = "none")
#nwk string that describes the tree
#########################################################################
#true tree that describes history of the tumor
#This function has the option to be simulation time (all leaves will be represented
#as being sampled at the same time),
#number of generations (will not be the same for all lineages), or molecualar distance
#(number of genetic distances). The genetic tree will be most useful downstream for
#calculating tree stats.
#
########################################################################
convert_nodes_to_string <- function(orphan_cells,
all_cells,
branch_unit = c("time", "molecular", "generations")){
#should be already sorted by index, but just to make sure
all_cells <- all_cells %>% arrange(index)
#make presence-absence df
all_muts <- define_mut_presence_absence(all_cells) %>%
as.data.frame %>%
add_column("index" = all_cells$index) %>%
arrange(index) %>%
dplyr::select(-index)
#start out with each leaf as its own subtree
subtrees <- as.character(orphan_cells)
#keep track of all nodes in tree
node_vec <- orphan_cells
n <- length(orphan_cells)
while(length(subtrees) > 1) { #will connect subtrees by MCRA until reach single tree
#make all pariwise combinations of cells without mrca
all_combs <- as.data.frame(t(combn(orphan_cells, 2)))
#find ancestors of candidate cells
common_ancestors <- map2_dbl(all_combs$V1, all_combs$V2, function(index_1, index_2) find_MRCA(index_1 = index_1,
index_2 = index_2,
all_cells = all_cells))
common_ancestors_data <- all_cells[common_ancestors,]
#find youngest ancestor and two children
youngest_ancestor <- common_ancestors_data$index[common_ancestors_data$birthdate == max(common_ancestors_data$birthdate)]
#in case more than 2 cells have same ancestor,
#choose one to start, we will come back to the other
youngest_ancestor <- youngest_ancestor[1]
#keep track of children descended from that ancestor
children <- unique(unlist(all_combs[which(common_ancestors == youngest_ancestor),]))
branch_lengths <- c()
for (child in children) {
c <- last(which(node_vec == child))
if (branch_unit == "molecular") {
bl <- calc_pairwise_genetic_distance(child, youngest_ancestor, all_muts = all_muts)
branch_lengths <- c(branch_lengths, as.character(round(bl, 5)))
} else if(branch_unit == "generations") {
ancestors <- collect_all_ancestors(index = child, all_cells)
gens <- which(ancestors == youngest_ancestor)
branch_lengths <- c(branch_lengths, as.character(gens))
}else {
t_a <- all_cells[youngest_ancestor, "deathdate"]
t_c <- all_cells[child, "deathdate"] #use deathdate
branch_lengths <- c(branch_lengths, as.character(round(t_c-t_a,4)))
}
}
#make new subtree from combining children and MCRA
if (branch_unit == "none") { #don't include branch lengths
subtrees <- c(subtrees, paste0("(",paste(subtrees[which(orphan_cells %in% children)], collapse = ","),")",as.character(youngest_ancestor)))
} else {
subtrees <- c(subtrees, paste0("(",paste(paste(subtrees[which(orphan_cells %in% children)],branch_lengths,sep=":"), collapse = ","),")",as.character(youngest_ancestor)))
}
subtrees <- subtrees[-which(orphan_cells %in% children)] #remove child trees after used
orphan_cells <- c(orphan_cells, youngest_ancestor) #add ancestor as orphan
node_vec <- c(node_vec, youngest_ancestor)
orphan_cells <- orphan_cells[-which(orphan_cells %in% children)] #remove children
}
return(list("tree.text"= paste0(last(subtrees),";"), "node_vec" = node_vec))
}
sim_nwk_list <- convert_nodes_to_string(final_sampled_cells$index,
CC_sim_cells,
branch_unit = "none")
sim_nwk_list$tree.text
tree <- as.treedata(read.tree(text = sim_nwk_list$tree.text ))
ggtree(tree)
# tree <- convert_sim_to_tree(sampled_cells = final_sampled_cells,
#                             all_cells = CC_sim_cells,
#                             branch_unit = "none")
ggtree(tree) + geom_tiplab()
# tree <- convert_sim_to_tree(sampled_cells = final_sampled_cells,
#                             all_cells = CC_sim_cells,
#                             branch_unit = "none")
ggtree(tree) + geom_tiplab(size = 0.5)
# tree <- convert_sim_to_tree(sampled_cells = final_sampled_cells,
#                             all_cells = CC_sim_cells,
#                             branch_unit = "none")
ggtree(tree) + geom_tiplab(size = 6)
# tree <- convert_sim_to_tree(sampled_cells = final_sampled_cells,
#                             all_cells = CC_sim_cells,
#                             branch_unit = "none")
ggtree(tree) + geom_tiplab(size = 2)
tree_string <- "(((Maya,Trevor),(Marlin, (Thomas, Nicola))),((Jover,Barney),
(Louise,(Cassia,((Gytis, Alli, Sydney),((Kairsten, John), Katie))))));"
tree <- as.treedata(read.tree(text = tree_string ))
ggtree(tree) + geom_tiplab(geom="label") + xlim(NA, 8)
cor(data2)
cor(df2)
pheatmap(cor(df2))
maps2stan
library(rethinking)
map2stan()
m23.6 <- map2stand(alist(total_tools <- dpois(mu),
log(mu) <- a + a_society[society] + bp*logpop,
a ~ dnorm(0,10),
bp ~ dnorm(0,1),
a_society[society] ~ dnorm(0, sigma_society),
sigma_society ~ dcauchy(0,1)
),
data =d,
iter = 400,
chains = 3)
m23.6 <- map2stan(alist(total_tools <- dpois(mu),
log(mu) <- a + a_society[society] + bp*logpop,
a ~ dnorm(0,10),
bp ~ dnorm(0,1),
a_society[society] ~ dnorm(0, sigma_society),
sigma_society ~ dcauchy(0,1)
),
data =d,
iter = 400,
chains = 3)
data(Kline)
d <- Kline
d$logpop <- log(d$population)
d$society <- 1:10
m23.6 <- map2stan(alist(total_tools <- dpois(mu),
log(mu) <- a + a_society[society] + bp*logpop,
a ~ dnorm(0,10),
bp ~ dnorm(0,1),
a_society[society] ~ dnorm(0, sigma_society),
sigma_society ~ dcauchy(0,1)
),
data =d,
iter = 400,
chains = 3)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
install.packages("rstan", type = "source")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages("rstan", type = "source")
install.packages("rstan")
data(Kline)
d <- Kline
d$logpop <- log(d$population)
d$society <- 1:10
m23.6 <- map2stan(alist(total_tools <- dpois(mu),
log(mu) <- a + a_society[society] + bp*logpop,
a ~ dnorm(0,10),
bp ~ dnorm(0,1),
a_society[society] ~ dnorm(0, sigma_society),
sigma_society ~ dcauchy(0,1)
),
data =d,
iter = 400,
chains = 3)
library(rethinking)
data(Kline)
d <- Kline
d$logpop <- log(d$population)
d$society <- 1:10
m23.6 <- map2stan(alist(total_tools <- dpois(mu),
log(mu) <- a + a_society[society] + bp*logpop,
a ~ dnorm(0,10),
bp ~ dnorm(0,1),
a_society[society] ~ dnorm(0, sigma_society),
sigma_society ~ dcauchy(0,1)
),
data =d,
iter = 400,
chains = 3)
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
remotes::install_github("stan-dev/rstan", ref = "develop",
subdir = "rstan/rstan", build_opts = "")
library(rethinking)
rstan_options(auto_write = TRUE)
data(Kline)
d <- Kline
d$logpop <- log(d$population)
d$society <- 1:10
m23.6 <- map2stan(alist(total_tools <- dpois(mu),
log(mu) <- a + a_society[society] + bp*logpop,
a ~ dnorm(0,10),
bp ~ dnorm(0,1),
a_society[society] ~ dnorm(0, sigma_society),
sigma_society ~ dcauchy(0,1)
),
data =d,
iter = 400,
chains = 3)
install.packages("Rccp")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
library(rethinking)
data(Kline)
d <- Kline
d$logpop <- log(d$population)
d$society <- 1:10
m23.6 <- map2stan(alist(total_tools <- dpois(mu),
log(mu) <- a + a_society[society] + bp*logpop,
a ~ dnorm(0,10),
bp ~ dnorm(0,1),
a_society[society] ~ dnorm(0, sigma_society),
sigma_society ~ dcauchy(0,1)
),
data =d,
iter = 400,
chains = 3)
post <- extract.samples(m12.6)
post <- extract.samples(m23.6)
post
d.pred <- list(
logpop = seq(from=6, to=14, length.out=30),
society = rep(1,30)
)
a_society_sims <- rnorm(20000,0,post$sigma_society)
a_societ_sim <- matrix(a_society_sims, 2000,10)
link.m23.6
link.m23.6 <- link(m23.6, n = 200, data=d.pred, replace= list(a_society=a_society_sims))
a_society_sims <- rnorm(20000,0,post$sigma_society)
a_society_sim <- matrix(a_society_sims, 2000,10)
link.m23.6 <- link(m23.6, n = 200, data=d.pred, replace= list(a_society=a_society_sims))
str(m23.6)
m23.6$a_society
m23.6@a_society
m23.6
a_society_sims <- rnorm(20000,0,post$sigma_society)
a_society_sims <- matrix(a_society_sims, 2000,10)
link.m23.6 <- link(m23.6, n = 200, data=d.pred, replace= list(a_society=a_society_sims))
plot(d$logpop, d$total_tools, col= rangi2, pch= 16, xlab="log population",  ylab="total tools")
mu.median <- apply(link.m23.6, 2, median)
lines(d.pred$logpop, mu.median)
mu.PI <- apply(link.m23.6, 2, PI, prob=0.97)
shade(mu.PI, d.pred$logpop)
mu.PI <- apply(link.m23.6, 2, PI, prob=0.89)
shade(mu.PI, d.pred$logpop)
mu.PI <- apply(link.m23.6, 2, PI, prob=0.67)
shade(mu.PI, d.pred$logpop)
precis(m23.6 )
plot(precis(m23.6 ))
View(post)
setwd("/Users/mayalewinsohn/Documents/PhD/Bedford_lab/practice/lab_traits")
library(tidyverse)
library(phangorn)
library(ggrepel)
library(ggtree)
library(treeio)
library(rethinking)
data <- read.csv("lab_traits_responses_cleaned_binary.csv")
pca_analysis <- prcomp(t(data[,-1]), scale = TRUE)
pca_analysis <- as.data.frame(pca_analysis$rotation) %>%
bind_cols(., data)
ggplot(pca_analysis, aes(x = PC1, y = PC2, label = Name)) + geom_label_repel() + theme_bw() + geom_point()
df <- data[,-1]
rownames(df) <- data$Name
dm <- dist(data[,-1])
library(dendextend)
library(ComplexHeatmap)
row_dend = hclust(dist(df)) # row clustering
col_dend = hclust(dist(t(df))) # column clustering
Heatmap(df,
cluster_rows = color_branches(row_dend, k = 4),
cluster_columns = color_branches(col_dend, k = 2))
library("pheatmap")
# Heatmap(df,
#         cluster_rows = color_branches(row_dend, k = 4),
#         cluster_columns = color_branches(col_dend, k = 2))
library("pheatmap")
pheatmap(df, legend = FALSE)
pheatmap(dist(df))
data2 <- read.csv("lab_traits_responses_cleaned_encode.csv")
data2 <- read.csv("lab_traits_responses_cleaned_encode.csv")
for (col in 2:ncol(data2)) {
if(min(data2[,col]) == -1) {
print(col)
data2[data2[,col]==0,col] <- 0.5
data2[data2[,col]==-1,col] <- 0
}
}
df2 <- data2[,-1]
rownames(df2) <- data2$Name
pheatmap(df2, legend = FALSE)
write.csv(data2,"lab_traits_responses_cleaned_scaled.csv")
pca_analysis <- prcomp(t(data2[,-1]), scale = TRUE)
pca_analysis <- as.data.frame(pca_analysis$rotation) %>%
bind_cols(., data)
ggplot(pca_analysis, aes(x = PC1, y = PC2, label = Name)) + geom_label_repel() + geom_point() + theme_bw()
tree_string <- "(((Maya,Trevor),(Marlin, (Thomas, Nicola))),((Jover,Barney),
(Louise,(Cassia,((Gytis, Alli, Sydney),((Kairsten, John), Katie))))));"
tree <- as.treedata(read.tree(text = tree_string ))
ggtree(tree) + geom_tiplab(geom="label") + xlim(NA, 8)
pheatmap(cor(df2))
data(Kline)
d <- Kline
d$logpop <- log(d$population)
d$society <- 1:10
m23.6 <- map2stan(alist(total_tools <- dpois(mu),
log(mu) <- a + a_society[society] + bp*logpop,
a ~ dnorm(0,10),
bp ~ dnorm(0,1),
a_society[society] ~ dnorm(0, sigma_society),
sigma_society ~ dcauchy(0,1)
),
data =d,
iter = 400,
chains = 3)
post <- extract.samples(m23.6)
d.pred <- list(
logpop = seq(from=6, to=14, length.out=30),
society = rep(1,30)
)
tree_string <- "(((Maya,Trevor),(Marlin, (Thomas, Nicola))),((Jover,Barney),
(Cassia,((Gytis, Alli), (Louise, Sydney)),((Kairsten, John), Katie))));"
tree <- as.treedata(read.tree(text = tree_string ))
ggtree(tree) + geom_tiplab(geom="label") + xlim(NA, 8)
tree_string <- "(((Maya,Trevor),(Marlin, (Thomas, Nicola))),((Jover,Barney),
(Cassia,(((Gytis, Alli), (Louise, Sydney)),((Kairsten, John), Katie))));"
tree <- as.treedata(read.tree(text = tree_string ))
tree_string <- "(((Maya,Trevor),(Marlin, (Thomas, Nicola))),((Jover,Barney),
(Cassia,(((Gytis, Alli), (Louise, Sydney)),((Kairsten, John), Katie)))));"
tree <- as.treedata(read.tree(text = tree_string ))
tree_string <- "(((Maya,Trevor),(Marlin, (Thomas, Nicola))),((Jover,Barney),
(Cassia,(((Gytis, Alli), (Louise, Sydney)),((Kairsten, John), Katie)))));"
tree <- as.treedata(read.tree(text = tree_string ))
tree_string <- "(((Maya,Trevor),(Marlin, (Thomas, Nicola))),((Jover,Barney),
(Cassia,((((Gytis, Alli), (Louise, Sydney)),((Kairsten, John), Katie))))));"
tree <- as.treedata(read.tree(text = tree_string ))
ggtree(tree) + geom_tiplab(geom="label") + xlim(NA, 8)
tree_string <- "(((Maya,Trevor),(Marlin, (Thomas, Nicola))),((Jover,Barney),
(Cassia,(((Gytis, Alli), (Louise, Sydney)),((Kairsten, John), Katie)))));"
tree <- as.treedata(read.tree(text = tree_string ))
ggtree(tree) + geom_tiplab(geom="label") + xlim(NA, 8)
tree_string <- "(((Maya,Trevor),(Marlin, (Thomas, Nicola))),((Jover,Barney),
(Cassia,(((Gytis, Alli, Misja), (Louise, Sydney)),((Kairsten, John), Katie)))));"
tree <- as.treedata(read.tree(text = tree_string ))
ggtree(tree) + geom_tiplab(geom="label") + xlim(NA, 8)
tree_string2 <- "((Trevor,John,(Alli, Louise)),((Tom, (Cassia, Misja)),(Sydney,(Marlin,(Jover, Kairsten, Katie)))))"
tree2 <- as.treedata(read.tree(text = tree_string2 ))
ggtree(tree2) + geom_tiplab(geom="label") + xlim(NA, 8)
tree_string2 <- "((Trevor,John,(Alli, Louise)),((Tom, (Cassia, Misja)),(Sydney,(Marlin,(Jover, Kairsten, Katie)))));"
tree2 <- as.treedata(read.tree(text = tree_string2 ))
ggtree(tree2) + geom_tiplab(geom="label") + xlim(NA, 8)
tree_string2 <- "((Trevor,(John,(Alli, Louise))),((Tom, (Cassia, Misja)),(Sydney,(Marlin,(Jover, Kairsten, Katie)))));"
tree2 <- as.treedata(read.tree(text = tree_string2 ))
ggtree(tree2) + geom_tiplab(geom="label") + xlim(NA, 8)
tree_string2 <- "((Trevor,(John,(Alli, Louise))),((Tom, (Cassia, Misja)),(Sydney,(Marlin,(Jover, Kairsten, Katie)))));"
tree2 <- as.treedata(read.tree(text = tree_string2 ))
ggtree(tree2) + geom_tiplab(geom="label") + xlim(NA, 8)
tree_string2 <- "(((Trevor,(John,(Alli, Louise))),((Nicola, Maya),(Gytis, Barney))),((Tom, (Cassia, Misja)),(Sydney,(Marlin,(Jover, Kairsten, Katie)))));"
tree2 <- as.treedata(read.tree(text = tree_string2 ))
ggtree(tree2) + geom_tiplab(geom="label") + xlim(NA, 8)
tree <- as.treedata(read.tree(text = sim_nwk_list$tree.text ))
# tree <- convert_sim_to_tree(sampled_cells = final_sampled_cells,
#                             all_cells = CC_sim_cells,
#                             branch_unit = "none")
ggtree(tree) + geom_tiplab(size = 2)
sim_nwk_list$tree.text
